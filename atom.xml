<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Neoimale]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-10-21T03:32:34.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Neo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Ubuntu 14.04 安装tenda w311m网卡驱动]]></title>
    <link href="http://yoursite.com/2015/10/21/Ubuntu-14-04-%E5%AE%89%E8%A3%85tenda-w311m%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    <id>http://yoursite.com/2015/10/21/Ubuntu-14-04-安装tenda-w311m网卡驱动/</id>
    <published>2015-10-21T02:19:00.000Z</published>
    <updated>2015-10-21T03:32:34.000Z</updated>
    <content type="html"><![CDATA[<p>近日组装了几台台式机，全部装了Ubuntu14.04，但面临一个问题——网络连接。总不能给每台机器都签根线吧，路由器也没那么多口，于是外置USB网卡是最好的选择。通过某宝找到了腾达的w311m无线网卡，说是Windows/Linux/MAC全支持。</p>
<p>从官网下载了W311M V3.0网卡驱动(LINUX) V3.0，V3.0版本的网卡背面的FCC ID为<code>V7TW311M2</code>。根据网上的教程，一步步安装。</p>
<ol>
<li>解压出源码；</li>
<li>在os/linux/config.mk中找到并修改：<code>HAS_WPA_SUPPLICANT=y</code>以及<code>HAS_NATIVE_WPA_SUPPLICANT_SUPPORT=y</code>，保存；</li>
<li>在源码根目录下执行<code>make</code>；</li>
<li>在源码根目录下执行<code>sudo make install</code>；</li>
<li>执行<code>sudo modprobe mt7601Usta</code>；</li>
<li>执行<code>lsmod | grep mt7601</code>，可以找到安装的模块<code>mt7601Usta   807204  0</code>；</li>
<li>编辑/etc/modules文件，加入：<code>mt7601Usta</code>，保存，使得每次开机时自动加载驱动模块。</li>
</ol>
<p>在完成以上步骤以后，确实可以看到无线网络了，可一打开浏览器准备拿百度来测试测试（百度的正确使用方法），结果就死机了。。。空欢喜一场啊！之后重试好几次还是一样。没办法，只能找原因了。一番谷歌之后，通过系统日志发现了一些蛛丝马迹。<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dmesg | grep -e mt7601</span><br><span class="line">mt7601Usta: module verification failed: signature<span class="instruction"> and/or </span> required key missing - tainting kernel</span><br></pre></td></tr></table></figure></p>
<p>Ubuntu14.04的内核应该是开启了内核模块签名校验的，难道腾达官网版本的是不带签名的？这真让人无力吐槽。直接说解决方案吧，在github上找到了开源工程，把最新代码下载下来按照上面的方法再编译安装一遍。<a href="https://github.com/porjo/mt7601.git" target="_blank" rel="external">https://github.com/porjo/mt7601.git</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>近日组装了几台台式机，全部装了Ubuntu14.04，但面临一个问题——网络连接。总不能给每台机器都签根线吧，路由器也没那么多口，于是外置USB网卡是最好的选择。通过某宝找到了腾达的w311m无线网卡，说是Windows/Linux/MAC全支持。</p>
<p>从官网下载]]>
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="经验" scheme="http://yoursite.com/categories/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于hexo快速建blog]]></title>
    <link href="http://yoursite.com/2015/10/18/%E5%9F%BA%E4%BA%8Ehexo%E5%BF%AB%E9%80%9F%E5%BB%BAblog/"/>
    <id>http://yoursite.com/2015/10/18/基于hexo快速建blog/</id>
    <published>2015-10-18T15:09:00.000Z</published>
    <updated>2015-10-18T16:48:41.000Z</updated>
    <content type="html"><![CDATA[<p>之前用WordPress搭建过一个博客，最近因为项目的原因接触到node.js，发现有基于node.js的博客框架hexo，轻便又功能强大，于是试着弄一弄。</p>
<h2 id="安装hexo">安装hexo</h2><h3 id="安装node-js">安装node.js</h3><p>第一步是安装node.js的环境,像我早就配好环境的就可以跳过这一步了。如何安装node.js可以自行搜索，不同的系统安装方式不同。</p>
<h3 id="hexo框架">hexo框架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init folder-name</span><br><span class="line">$ <span class="built_in">cd</span> folder-name</span><br><span class="line">$ npm install </span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>上面几步通过npm安装了hexo框架，并初始化了博客目录。最后一步启动了网站服务，可通过 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 访问。当然也可以像 <code>hexo server -p 5000</code> 这样来指定端口，避免端口被占用或者其他情况。</p>
<h3 id="hexo插件">hexo插件</h3><p>在<a href="https://hexo.io/plugins/" target="_blank" rel="external">hexo官网</a>列出了一些常用插件，我就只安装了hexo admin，毕竟有个控制台总比没有的强，提供的编辑预览也是极好的。具体插件怎么安装就看对应的github项目说明吧。</p>
<h3 id="hexo主题">hexo主题</h3><p>hexo另外一个优点就是提供了主题，觉得默认的landscape太普通咱就换。所幸知乎上有同学爬取了github上的hexo主题项目整理了一下，咱们就慢慢挑吧。(<a href="http://www.zhihu.com/question/24422335" target="_blank" rel="external"><strong>我是传送门</strong></a>)</p>
<h2 id="网站托管">网站托管</h2><h3 id="github_pages">github pages</h3><p>自从有了github pages，网站部署从未如此简单,就像它官网介绍的那样。<em>Just edit, push, and your changes are live.</em></p>
<p>分为两种使用场景：<code>个人或组织的网站</code>和<code>项目网站</code>.那我们的博客自然属于前者，后者大多数用于项目的介绍、文档等。</p>
<p>第一步，在github上创建名为<code>username.github.io</code>的项目,<code>username</code>是github的用户名。</p>
<p>第二步，在hexo的_config.yml中配置部署时git选项。不要忘了在github配置ssh key。<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Deployment</span></span><br><span class="line"><span class="preprocessor">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="title">deploy</span>:</span><br><span class="line">  <span class="typedef"><span class="keyword">type</span>: git</span></span><br><span class="line">  repository: git@github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<p>第三步，生成文章并部署，hexo会自动push到远端。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy -g</span><br></pre></td></tr></table></figure></p>
<h2 id="自定义域名">自定义域名</h2><p>一般我们都会给自己的博客搞个顶级域名，username.github.io这样总归BG还不够。</p>
<p>第一步，在github工程根目录下新建一个CNAME文件(<strong>注意全大写</strong>)，里面写上你的域名，比如xxxxx.com或者blog.xxx.com。</p>
<p>第二步，在域名商那边配置一下，将域名指你的username.github.io。</p>
<p>好了，接下来该想想要写啥文章了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前用WordPress搭建过一个博客，最近因为项目的原因接触到node.js，发现有基于node.js的博客框架hexo，轻便又功能强大，于是试着弄一弄。</p>
<h2 id="安装hexo">安装hexo</h2><h3 id="安装node-js">安装node.j]]>
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
